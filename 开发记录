1、webview使用记录
	1、拦截请求跳转有两个loding方法，shouldOverrideUrlLoading，参数方式不一样
	shouldOverrideUrlLoading(WebView view, final String url)被丢弃，但是 此方法可以拦截请求，另外一个拦截不到（未知）
	当返回值为false weview自己处理网络请求；返回值为true时,可以控制请求跳转至app原生界面或者消费掉下一次请求，使页面不再跳转
	2、webview加载页面和传递参数使用webview.loadUrl方法
	传递参数 eg: webView.loadUrl("javascript:setUserToken('" + token + "')");
	加载页面 eg：webView.loadUrl(url);
2、图片字节流转换图片
	new Thread(new Runnable() {
                @Override
                public void run() {
                    try {
                        // 定义获取文件内容的URL
                        URL myURL = new URL(url);
                        // 打开URL链接
                        URLConnection ucon = myURL.openConnection();
                        // 使用InputStream，从URLConnection读取数据
                        InputStream is = ucon.getInputStream();
                        final Bitmap bitmap = BitmapFactory.decodeStream(is);
                        ImageUtils.saveImageToGallery(PrototypeContestActivity.this, bitmap);
                    }catch (Exception e){
                        e.printStackTrace();
                    }
                }
            }).start();